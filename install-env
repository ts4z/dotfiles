#!/bin/sh

# Set up usual utilities on a host that's new to me.

# gotchas:
# - untested except on a Mac, and even then, not tested much
# - schizophrenic with respect to writing to stdout/stderr

# I've had problems on a corp laptop getting the CLI tools installed.  In this
# case, I installed them by hand; I'm not sure why homebrew couldn't do it.
# I'll debug it next time I set up a Mac, I suppose.

set -eu

# This is a work-in-progress to install all the stuff that I assume is
# installed, but isn't necessarily.

dryrun=''                     # if set, don't do anything, just pretend
sw_aws=''                     # if set, install awscli and other AWS utilities
sw_k8s=''                     # if set, install all the k8s stuff we know about
sw_1password=''               # if set, & on mac, install 1password cask 

help() {
    cat 1>&2 <<EOF
$0: slightly abstracted setup utility for my dev box

Supposed to be idempotent.  May require passwords and other interaction.

options:
-1 .... install 1password cask (Mac only)
-8 .... install kubernetes stuff
-a .... install awscli and other AWS utilities
-n .... don't do anything, just talk about it
EOF
}
# -n: dryrun
# -8: install kubernetes stuff
args=`getopt an18 $*`

if [ $? != 0 ]; then
    echo 'bad arg'
    exit 2
fi
set -- $args
for i; do
    case "$i" in
	-1) sw_1password=1
	    shift
	    ;;
        -a) sw_aws=1
            shift
            ;;
        -8) sw_k8s=1
            shift
            ;;
        -n) dryrun=1
            shift
            ;;
    esac
done

note () {
    echo "..." "$@"
}

# Feature test
inst_k8s () {
    test -n "$sw_k8s"
}

# Feature test
inst_aws () {
    test -n "$sw_aws"
}

inst_1password() {
    on_a_mac && test -n "$sw_1password"
}

# Feature test
on_a_mac() {
    test "Darwin" = "$(uname -s)"
}

on_debian() {
    test -f /etc/debian_version
}

begin_section () {
    echo "-=-=- installing: $1..."
}

# Install abstract, similarly-named packages.  (Heuristic, and a lousy one.)
install_pkgs () {
    if on_debian ; then
        cmd sudo apt-get install "$@"
    elif on_a_mac ; then
        cmd brew_install_pkgs "$@"
    else
        echo "Local package manager unknown."
        exit 2
    fi
}

cmd () {
    echo "$" "$@"
    noecho_cmd "$@"
}

noecho_cmd () {
    if test -z "$dryrun" ; then
        "$@"
    fi
}

maybe_install_homebrew () {
    if [ -x /usr/local/bin/brew ]; then
	note 'brew is already installed; will just use it as-is.'
    else
	echo '$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
	noecho_cmd /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
}

if on_a_mac; then
    note "This is a Mac. Will use Homebrew."
    maybe_install_homebrew
fi

#############################################################################
begin_section "the usual suspects"
install_pkgs \
    curl \
    direnv \
    finger \
    gnupg \
    ispell \
    jq \
    less \
    shellcheck \
    tcsh \
    tree \
    zsh \
    tmux


#############################################################################
if ! on_a_mac ; then
    begin_section "installing non-Mac stuff"

    install_pkgs \
        dc \
        fortune-mod \
        ncal \
        strace \
        tv-fonts \
        xterm

    # todo: check flag?  these are dependencies, here largely
    # for me playing with xscreensaver
    install_pkgs \
        intltool \
        libcairo2-doc \
        libdatrie-doc \
        libgdk-pixbuf-xlib-2.0-dev \
        libgirepository1.0-dev \
        libgirepository1.0-doc \
        libgl1-mesa-dev \
        libgl1-mesa-glx \
        libglib2.0-doc \
        libglu1-mesa-dev \
        libgraphite2-utils \
        libgtk-3-doc devhelp \
        libgtk2.0-dev \
        libgtk2.0-doc \
        libnotify-bin \
        libpam-dev \
        libpango1.0-doc libthai-doc libxext-doc \
        libsystemd-dev  \
        libxpm-dev \
        python-markdown-doc \
        zsh-doc                 # leave this last
fi

# Fonts that I like for Emacs.
if on_debian ; then
    install_pkgs \
        fonts-cmu \
        fonts-hack-ttf \
        usbutils
fi

if on_debian ; then
    # UPS?
    install_pkgs \
        nut-client \
        nut-server
fi

#############################################################################
if on_a_mac ; then
    begin_section "possibly Homebrew-specific package names"

    # this is in the Mac block beccause the Debian installation is not
    # the same.
    install_pkgs go

    inst_aws && install_pkgs awscli
    inst_k8s && install_pkgs kubernetes-helm
fi

#############################################################################
if inst_k8s ; then
    begin_section "k8s tools"
    install_pkgs kops kubectl
fi

#############################################################################
begin_section "Emacs"

if on_a_mac; then
    if [ -x /usr/local/bin/emacs ]; then
        note "emacs already installed; skipping"
    else
        cmd brew install emacs --HEAD --with-cocoa --with-librsvg --with-imagemagick@6
    fi

    if [ -d /usr/local/opt/emacs/Emacs.app ]; then
        note "updating symlink"
        (cd /Applications && (
             cmd rm -f /Applications/Emacs.app &&
             cmd ln -s /usr/local/opt/emacs/Emacs.app))
    fi

else
    install_pkgs emacs
fi

#############################################################################
if inst_k8s ; then
    begin_section "Kubernetes utilities"

    install_pkgs kops kubectl

    if on_a_mac ; then
        cmd brew tap blendle/blendle
        install_pkgs kns
    fi
fi

#############################################################################

if inst_1password ; then
    if on_a_mac ; then
        brew cask install 1password
    else
        echo "I don't know how to install 1password here."
    fi
fi

if on_a_mac ; then
    brew cask install firefox
fi

begin_section "completed"
